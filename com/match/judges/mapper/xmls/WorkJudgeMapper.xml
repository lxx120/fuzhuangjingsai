<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.match.judges.mapper.WorkJudgeMapper">
	<resultMap id="BaseResultMap"
		type="com.match.judges.model.WorkJudge">
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="creator" jdbcType="BIGINT" property="creator" />
		<result column="modifier" jdbcType="BIGINT" property="modifier" />
		<result column="ctime" jdbcType="TIMESTAMP" property="ctime" />
		<result column="mtime" jdbcType="TIMESTAMP" property="mtime" />
		<result column="division" jdbcType="BIGINT" property="division" />
		<result column="worksID" jdbcType="BIGINT" property="worksid" />
		<result column="judgeID" jdbcType="BIGINT" property="judgeid" />
		<result column="judged" jdbcType="INTEGER" property="judged" />
		<result column="score" jdbcType="DOUBLE" property="score" />
		<result column="judgeTime" jdbcType="TIMESTAMP"
			property="judgetime" />
		<result column="arid" jdbcType="BIGINT" property="arid" />
		<result column="isvote" jdbcType="INTEGER" property="isvote" />
	</resultMap>
	<sql id="Base_Column_List">
		id, creator, modifier, ctime, mtime, division, worksID, judgeID, judged,
		score, judgeTime,
		arid, isvote
	</sql>
	<select id="selectByPrimaryKey" parameterType="java.lang.Long"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from workjudge
		where id = #{id,jdbcType=BIGINT}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
		delete from workjudge
		where id = #{id,jdbcType=BIGINT}
	</delete>
	<insert id="insert"
		parameterType="com.match.judges.model.WorkJudge">
		insert into workjudge (id, creator, modifier,
		ctime, mtime, division,
		worksID, judgeID, judged,
		score, judgeTime, arid,
		isvote)
		values (#{id,jdbcType=BIGINT}, #{creator,jdbcType=BIGINT},
		#{modifier,jdbcType=BIGINT},
		#{ctime,jdbcType=TIMESTAMP}, #{mtime,jdbcType=TIMESTAMP}, #{division,jdbcType=BIGINT},
		#{worksid,jdbcType=BIGINT}, #{judgeid,jdbcType=BIGINT},
		#{judged,jdbcType=INTEGER},
		#{score,jdbcType=DOUBLE}, #{judgetime,jdbcType=TIMESTAMP}, #{arid,jdbcType=BIGINT},
		#{isvote,jdbcType=INTEGER})
	</insert>
	<insert id="insertSelective"
		parameterType="com.match.judges.model.WorkJudge">
		insert into workjudge
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="creator != null">
				creator,
			</if>
			<if test="modifier != null">
				modifier,
			</if>
			<if test="ctime != null">
				ctime,
			</if>
			<if test="mtime != null">
				mtime,
			</if>
			<if test="division != null">
				division,
			</if>
			<if test="worksid != null">
				worksID,
			</if>
			<if test="judgeid != null">
				judgeID,
			</if>
			<if test="judged != null">
				judged,
			</if>
			<if test="score != null">
				score,
			</if>
			<if test="judgetime != null">
				judgeTime,
			</if>
			<if test="arid != null">
				arid,
			</if>
			<if test="isvote != null">
				isvote,
			</if>
			<if test="groupid != null">
				groupid,
			</if>
			<if test="competitionid != null">
				competitionid,
			</if>
			<if test="weight !=null">
				weight,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=BIGINT},
			</if>
			<if test="creator != null">
				#{creator,jdbcType=BIGINT},
			</if>
			<if test="modifier != null">
				#{modifier,jdbcType=BIGINT},
			</if>
			<if test="ctime != null">
				#{ctime,jdbcType=TIMESTAMP},
			</if>
			<if test="mtime != null">
				#{mtime,jdbcType=TIMESTAMP},
			</if>
			<if test="division != null">
				#{division,jdbcType=BIGINT},
			</if>
			<if test="worksid != null">
				#{worksid,jdbcType=BIGINT},
			</if>
			<if test="judgeid != null">
				#{judgeid,jdbcType=BIGINT},
			</if>
			<if test="judged != null">
				#{judged,jdbcType=INTEGER},
			</if>
			<if test="score != null">
				#{score,jdbcType=DOUBLE},
			</if>
			<if test="judgetime != null">
				#{judgetime,jdbcType=TIMESTAMP},
			</if>
			<if test="arid != null">
				#{arid,jdbcType=BIGINT},
			</if>
			<if test="isvote != null">
				#{isvote,jdbcType=INTEGER},
			</if>
			<if test="groupid !=null">
				#{groupid},
			</if>
			<if test="competitionid !=null">
				#{competitionid},
			</if>
			<if test="weight !=null">
			 	#{weight},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective"
		parameterType="com.match.judges.model.WorkJudge">
		update workjudge
		<set>
			<if test="creator != null">
				creator = #{creator,jdbcType=BIGINT},
			</if>
			<if test="modifier != null">
				modifier = #{modifier,jdbcType=BIGINT},
			</if>
			<if test="ctime != null">
				ctime = #{ctime,jdbcType=TIMESTAMP},
			</if>
			<if test="mtime != null">
				mtime = #{mtime,jdbcType=TIMESTAMP},
			</if>
			<if test="division != null">
				division = #{division,jdbcType=BIGINT},
			</if>
			<if test="worksid != null">
				worksID = #{worksid,jdbcType=BIGINT},
			</if>
			<if test="judgeid != null">
				judgeID = #{judgeid,jdbcType=BIGINT},
			</if>
			<if test="judged != null">
				judged = #{judged,jdbcType=INTEGER},
			</if>
			<if test="score != null">
				score = #{score,jdbcType=DOUBLE},
			</if>
			<if test="judgetime != null">
				judgeTime = #{judgetime,jdbcType=TIMESTAMP},
			</if>
			<if test="arid != null">
				arid = #{arid,jdbcType=BIGINT},
			</if>
			<if test="isvote != null">
				isvote = #{isvote,jdbcType=INTEGER},
			</if>
			<if test="groupid !=null">
				groupid = #{groupid},
			</if>
			<if test="competitionid !=null">
				competitionid = #{competitionid},
			</if>
			<if test="weight !=null">
				weight = #{weight},
			</if>
		</set>
		where id = #{id,jdbcType=BIGINT}
	</update>
	<update id="updateByPrimaryKey"
		parameterType="com.match.judges.model.WorkJudge">
		update workjudge
		set creator = #{creator,jdbcType=BIGINT},
		modifier = #{modifier,jdbcType=BIGINT},
		ctime = #{ctime,jdbcType=TIMESTAMP},
		mtime = #{mtime,jdbcType=TIMESTAMP},
		division = #{division,jdbcType=BIGINT},
		worksID = #{worksid,jdbcType=BIGINT},
		judgeID = #{judgeid,jdbcType=BIGINT},
		judged = #{judged,jdbcType=INTEGER},
		score = #{score,jdbcType=DOUBLE},
		judgeTime = #{judgetime,jdbcType=TIMESTAMP},
		arid = #{arid,jdbcType=BIGINT},
		isvote = #{isvote,jdbcType=INTEGER}
		where id = #{id,jdbcType=BIGINT}
	</update>

	<insert id="addBatchWorkJudge" parameterType="java.util.List">
		insert into workjudge
		(mtime,division,worksID,judgeID,judged,arid,groupid,competitionid,weight)
		values
		<foreach collection="list" item="item" index="index"
			separator=",">
			(#{item.mtime},
			#{item.division},
			#{item.worksid},
			#{item.judgeid},
			#{item.judged},
			#{item.arid},
			#{item.groupid},
			#{item.competitionid},
			#{item.weight})
		</foreach>
	</insert>

	<select id="findWorkInfo" resultType="Map">
		SELECT
		a.judged,b.abstraction,a.judgeID,a.competitionid,a.worksID,
		d.`realName`,
		c.teacher,
		b.`title`,
		e.`name` AS typename,
		f.`title` AS themetitle,
		a.`id`,g.`name` AS compangname,b.id as themeworkid
		FROM
		WorkJudge a
		LEFT JOIN themework b
		ON a.`worksID` = b.`id`
		LEFT JOIN ThemeSignup c
		ON b.`themesignupid` = c.`id`
		LEFT JOIN USER d
		ON c.`userid` = d.`id`
		LEFT JOIN Theme f ON c.`themeid` = f.`id`
		LEFT JOIN `propositiontype` e ON c.`workType`=e.`code`
		LEFT JOIN enterprise g ON f.`enterpriseid`=g.`id`
		where a.id = #{id}
	</select>
	
	<select id="findWorkInfo1" resultType="Map">
		SELECT
		d.`realName`,
		c.teacher,
		b.`title`,
		e.`name` AS typename,
		f.`title` AS themetitle,
		g.`name` AS compangname,b.id as themeworkid
		FROM
		themework b
		LEFT JOIN ThemeSignup c
		ON b.`themesignupid` = c.`id`
		LEFT JOIN USER d
		ON c.`userid` = d.`id`
		LEFT JOIN Theme f ON c.`themeid` = f.`id`
		LEFT JOIN `propositiontype` e ON c.`workType`=e.`code`
		LEFT JOIN enterprise g ON f.`enterpriseid`=g.`id`
		where b.id = #{id}
	</select>
	
	
	<update id="updateBatch"  parameterType="java.util.List">
         <foreach collection="list" item="item" index="index" open="" close="" separator=";">
               update workjudge
               <set>
                 weight=${item.weight}
               </set>
               	where id = ${item.id}
        </foreach>
 </update>
	
</mapper>